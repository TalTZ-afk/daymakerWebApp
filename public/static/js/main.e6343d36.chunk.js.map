{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","UI.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","chosenDate","Date","handleChange","bind","handleSubmit","handleChangeDate","evt","this","setState","target","name","value","preventDefault","currentList","createTodo","id","uuid","completed","date","className","onSubmit","htmlFor","type","placeholder","onChange","selected","minDate","showYearDropdown","yearDropdownItemNumber","scrollableYearDropdown","customInput","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","result","CSSTransition","key","timeout","classNames","style","background","color","onClick","TransitionGroup","TodoList","getDate","fullDate","printDayAndMonth","dateString","toISOString","year","toString","slice","month","day","yesterday","currentDate","yesterdayDate","handleCreate","handleToggleCompletion","handleTodoToday","removeTodoYesterday","printColor","getMonth","getDay","user","newTodo","create","updatedTask","update","toggleCompletion","isPlannedDelete","delete","plannedTodo","count","lists","todos","map","todo","_id","length","copyPlannedTodo","App","listIcon","getHours","untitledListCount","listName","changeCurrentList","creatNewList","handleColorChange","event","currentTarget","addList","updateListName","removeList","changeColor","src","undefined","image","onExpandClick","animation","expand","alt","fullName","class","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","list","index","maxLength","getUserFromDb","getUrl","document","getElementById","innerHTML","axios","get","then","res","data","intervalIsSet","remove","handleExpandClick","handleChangeCurrentList","handleAddList","handleRemoveList","handleListNameUpdate","handleChangeColor","interval","setInterval","clearInterval","post","userId","objIdsToUpdate","filter","t","idToUpdate","objIdsToDelete","idToDelete","newCurrentList","listId","newListName","colorId","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6343d36.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport DatePicker from \"react-datepicker\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      task: \"\",\n      chosenDate: new Date()\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeDate = this.handleChangeDate.bind(this);\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n    if(this.props.currentList === \"1\") {\n      this.props.createTodo({ task: this.state.task, chosenDate: this.state.chosenDate, id: uuid(), completed: false });\n    } else {\n      this.props.createTodo({ task: this.state.task, id: uuid(), completed: false });\n    }\n    this.setState({ task: \"\" });\n  }\n\n  handleChangeDate(date) {\n    this.setState({\n      chosenDate: date\n    });\n  }\n\n  render() {\n    if(this.props.currentList === \"1\") {\n      return (\n        <form className='NewTodoForm' onSubmit={this.handleSubmit}>\n          <label htmlFor='task'>New Todo</label>\n          <input\n            type='text'\n            placeholder='New Todo'\n            id='task'\n            name='task'\n            value={this.state.task}\n            onChange={this.handleChange}\n          />\n          <DatePicker \n            selected={this.state.chosenDate}\n            onChange={this.handleChangeDate}\n            minDate={new Date()}\n            showYearDropdown\n            yearDropdownItemNumber={15}\n            scrollableYearDropdown\n            customInput={<button type=\"button\" className=\"btn-calendar-open\"><i className=\"far fa-calendar-alt\"></i></button>}\n          />\n          <button className=\"add-todo\">Add Todo</button>\n        </form>\n      );\n    } else {\n      return (\n        <form className='NewTodoForm' onSubmit={this.handleSubmit}>\n          <label htmlFor='task'>New Todo</label>\n          <input\n            type='text'\n            placeholder='New Todo'\n            id='task'\n            name='task'\n            value={this.state.task}\n            onChange={this.handleChange}\n          />\n          <button className=\"add-todo\">Add Todo</button>\n        </form>\n      );\n    }\n  }\n}\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport \"./Todo.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id, false);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(evt) {\n    evt.preventDefault();\n    //take new task data and pass up to parent\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <CSSTransition key='editing' timeout={500} classNames='form'>\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n            <input\n              type='text'\n              value={this.state.task}\n              name='task'\n              onChange={this.handleChange}\n            />\n            <button style={{background: this.props.color}}>Save</button>\n          </form>\n        </CSSTransition>\n      );\n    } else {\n      result = (\n        <CSSTransition key='normal' timeout={500} classNames='task-text'>\n          <li className='Todo-task' onClick={this.handleToggle}>\n            {this.props.task}\n            <h6>{ this.props.chosenDate && this.props.chosenDate }</h6>\n          </li>\n        </CSSTransition>\n      );\n    }\n    return (\n      <TransitionGroup\n        className={this.props.completed ? \"Todo completed\" : \"Todo\"}\n      >\n        {result}\n        <div className='Todo-buttons'>\n          <button onClick={this.toggleForm}>\n            <i className='fas fa-pen' />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i className='fas fa-trash' />\n          </button>\n        </div>\n      </TransitionGroup>\n    );\n  }\n}\nexport default Todo;\n","import React, { Component } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport Todo from \"./Todo\";\nimport \"./TodoList.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCreate = this.handleCreate.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggleCompletion = this.handleToggleCompletion.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.printDayAndMonth = this.printDayAndMonth.bind(this);\n    this.handleTodoToday = this.handleTodoToday.bind(this);\n    this.removeTodoYesterday = this.removeTodoYesterday.bind(this);\n    this.printColor = this.printColor.bind(this);\n  }\n\n  date = new Date().getDate();\n  day;\n  month;\n  fullDate = this.printDayAndMonth() + this.date;\n\n  dateString = new Date().toISOString();\n  year = this.dateString.toString().slice(0, 4);\n  month = this.dateString.toString().slice(5, 7);\n  day = this.dateString.toString().slice(8, 10);\n  yesterday = this.day - 1;\n  currentDate = this.day + \"/\" + this.month + \"/\" + this.year;\n  yesterdayDate = this.yesterday + \"/\" + this.month + \"/\" + this.year;\n\n  printDayAndMonth() {\n    \n    switch (new Date().getMonth()) {\n      case 0:\n        this.month = \"January\";\n        break;\n      case 1:\n        this.month = \"February\";\n        break;\n      case 2:\n        this.month = \"March\";\n        break;\n      case 3:\n        this.month = \"April\";\n        break;\n      case 4:\n        this.month = \"May\";\n        break;\n      case 5:\n        this.month = \"June\";\n        break;\n      case 6:\n        this.month = \"July\";\n        break;\n      case 7:\n        this.month = \"August\";\n        break;\n      case 8:\n        this.month = \"September\";\n        break;\n      case 9:\n        this.month = \"October\";\n        break;\n      case 10:\n        this.month = \"November\";\n        break;\n      default:\n        this.month = \"December\";\n    }\n\n    switch (new Date().getDay()) {\n      case 0:\n        this.day = \"Sunday\";\n        break;\n      case 1:\n        this.day = \"Monday\";\n        break;\n      case 2:\n        this.day = \"Tuesday\";\n        break;\n      case 3:\n        this.day = \"Wednesday\";\n        break;\n      case 4:\n        this.day = \"Thursday\";\n        break;\n      case 5:\n        this.day = \"Friday\";\n        break;\n      default:\n        this.day = \"Saturday\";\n    }\n    return (this.day + \", \" + this.month + \" \");\n  }\n\n  color = \"\";\n\n  printColor() {\n    switch(this.props.user.color) {\n      case \"blue\":\n        this.color = \"#38b2f8\";\n        break;\n      case \"green\":\n        this.color = \"#42e6a4\";\n        break;\n      case \"black\":\n        this.color = \"black\";\n        break;\n      default:\n        this.color = \"#FF6666\";\n    }\n    return this.color;\n  }\n\n  handleCreate(newTodo) {\n    this.props.create(newTodo);\n  }\n\n  handleUpdate(id, updatedTask) {\n    this.props.update(id, updatedTask);\n  }\n\n  handleToggleCompletion(id) {\n    this.props.toggleCompletion(id);\n  }\n\n  handleRemove(id, isPlannedDelete) {\n    this.props.delete(id, isPlannedDelete);\n  }\n\n  handleTodoToday(plannedTodo) {\n    let count = 0;\n    this.props.user.lists[0].todos.map(todo => (\n      todo._id !== plannedTodo._id && count++\n    ));\n    if(count === this.props.user.lists[0].todos.length) {\n      this.props.copyPlannedTodo(plannedTodo);\n    }\n  }\n\n  removeTodoYesterday(plannedTodo) {\n    this.props.delete(plannedTodo._id, true);\n  }\n\n  render() {\n\n    this.props.user.lists[1].todos.map(plannedTodo => (\n      plannedTodo.chosenDate === this.currentDate && (this.handleTodoToday(plannedTodo))\n    ));\n\n    this.props.user.lists[1].todos.map(plannedTodo => (\n      plannedTodo.chosenDate === this.yesterdayDate && (this.removeTodoYesterday(plannedTodo))\n    ));\n\n    const todos = this.props.user.lists[this.props.currentList].todos.map(todo => {\n      return (\n        <CSSTransition key={todo._id} timeout={500} classNames='todo'>\n          <Todo\n            key={todo._id}\n            id={todo._id}\n            task={todo.todo}\n            completed={todo.completed}\n            chosenDate={todo.chosenDate}\n            color={this.printColor()}\n            removeTodo={this.handleRemove}\n            updateTodo={this.handleUpdate}\n            toggleTodo={this.handleToggleCompletion}\n          />\n        </CSSTransition>\n      );\n    });\n    return (\n      <div className='TodoList' id=\"expand-press\" style={{background: this.printColor()}}>\n        {\n          this.props.user.lists[this.props.currentList].name === \"Today\" ? \n            <div>\n            <h1>{this.props.user.lists[this.props.currentList].name}</h1>\n            <h4>{this.fullDate}</h4>\n            </div>\n          :\n            <h1>{this.props.user.lists[this.props.currentList].name}</h1>\n        }\n        \n        <NewTodoForm currentList={this.props.currentList} createTodo={this.handleCreate} />\n\n        <ul>\n          <TransitionGroup className='todo-list'>{todos}</TransitionGroup>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default TodoList;\n","import React, { Component } from \"react\";\r\nimport \"./UI.css\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: 0,\r\n            listName: \"\"\r\n        };\r\n        this.changeCurrentList = this.changeCurrentList.bind(this);\r\n        this.creatNewList = this.creatNewList.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n    }\r\n\r\n    listIcon = [\r\n        new Date().getHours() >= 18 || new Date().getHours() < 6 ? <i className=\"far fa-moon\"/> : <i className=\"fas fa-sun\"/>, \r\n        <i className=\"far fa-calendar-check\"/>, \r\n        <i className=\"fas fa-clipboard-list\"/>, \r\n        <i className=\"fas fa-tasks\"/>\r\n    ]\r\n\r\n    untitledListCount = 0;\r\n\r\n    changeCurrentList(event) {\r\n        if(event.target !== event.currentTarget) {\r\n            return;\r\n        }\r\n        this.props.changeCurrentList(event.currentTarget.id);\r\n    }\r\n\r\n    creatNewList() {\r\n        this.props.addList();\r\n    }\r\n\r\n    toggleForm(event) {\r\n        this.setState({ isEditing: event.currentTarget.id });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n          [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleUpdate(event) {\r\n        event.preventDefault();\r\n        this.props.updateListName(event.target.id, this.state.listName);\r\n        this.setState({ isEditing: 0, listName: \"\" });\r\n    }\r\n\r\n    handleRemove(event) {\r\n        this.props.removeList(event.currentTarget.id);\r\n    }\r\n\r\n    handleColorChange(event) {\r\n        this.props.changeColor(event.target.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img\r\n                    className=\"UI-btn UI-btn-out\" \r\n                    src={this.props.user.image === undefined || this.props.user.image === null ? \"%PUBLIC_URL%/../user-img.png\" : this.props.user.image}\r\n                    onClick={() => this.props.onExpandClick()} \r\n                    style={{\r\n                        animation: this.props.expand ? \"ui-img-drop 1s forwards\" : this.props.expand !== null && \"ui-img-float 1s forwards\"\r\n                    }}\r\n                    alt=\"user-img\"\r\n                />\r\n                <div className=\"UI\">\r\n                    <img\r\n                        className=\"UI-btn UI-btn-in\" \r\n                        src={this.props.user.image === undefined || this.props.user.image === null ? \"%PUBLIC_URL%/../user-img.png\" : this.props.user.image}\r\n                        onClick={() => this.props.onExpandClick()}\r\n                        alt=\"user-img\"\r\n                    />\r\n                    <div className=\"user-name\">\r\n                        <h4>Hi, {this.props.user.fullName}</h4>\r\n                        <div class=\"dropdown\">\r\n                            <button class=\"btn btn-secondary dropdown btn-dropdown\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                <i class=\"fas fa-sliders-h\"></i>\r\n                            </button>\r\n                            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                                <div class=\"dropdown-item color-pick\">\r\n                                    <p>Pick a Color:</p>\r\n                                    <button class=\"color-btn red\" id=\"red\" onClick={this.handleColorChange}></button>\r\n                                    <button class=\"color-btn blue\" id=\"blue\" onClick={this.handleColorChange}></button>\r\n                                    <button class=\"color-btn green\" id=\"green\" onClick={this.handleColorChange}></button>\r\n                                    <button class=\"color-btn black\" id=\"black\" onClick={this.handleColorChange}></button>\r\n                                </div>\r\n                                <div class=\"dropdown-divider\"></div>\r\n                                <a class=\"dropdown-item\" href=\"/logout\">Log Out</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                     {this.props.user.lists.map((list, index) => {\r\n                        let result;\r\n                        if(index < 3){\r\n                            result = (\r\n                                <div\r\n                                key={this.props.user.lists[index]._id} \r\n                                id={index}\r\n                                className=\"UI-obj list-name\"\r\n                                onClick={this.changeCurrentList}\r\n                                >\r\n                                    <h3 id={index} onClick={this.changeCurrentList}>\r\n                                        {this.listIcon[index]}\r\n                                        {\" \" + list.name}\r\n                                    </h3>\r\n                                </div>\r\n                            )\r\n                        } else if(this.state.isEditing === index.toString()) {\r\n                            result = (\r\n                                <div\r\n                                key={this.props.user.lists[index]._id} \r\n                                id={index}\r\n                                className=\"UI-obj list-name user-created-lists\"\r\n                                onClick={this.changeCurrentList} \r\n                                >\r\n                                    <form id={index} className='List-edit-form' onSubmit={this.handleUpdate}>\r\n                                        <input\r\n                                        type='text'\r\n                                        value={this.state.listName}\r\n                                        name='listName'\r\n                                        onChange={this.handleChange}\r\n                                        maxLength=\"9\"\r\n                                        />\r\n                                        <button><i className=\"fas fa-check\"></i></button>\r\n                                    </form>\r\n                                </div>\r\n                            )\r\n                        } else {\r\n                            result = (\r\n                                <div\r\n                                key={this.props.user.lists[index]._id} \r\n                                id={index} \r\n                                className=\"UI-obj list-name user-created-lists\"\r\n                                onClick={this.changeCurrentList} \r\n                                >\r\n                                    <h3 id={index} onClick={this.changeCurrentList}>\r\n                                        {this.listIcon[3]}\r\n                                        {\" \" + list.name}\r\n                                    </h3>\r\n                                    <div className='List-buttons'>\r\n                                        <button id={index} onClick={this.toggleForm}>\r\n                                            <i className='fas fa-pen' />\r\n                                        </button>\r\n                                        <button id={index} onClick={this.handleRemove}>\r\n                                            <i className='fas fa-trash' />\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        return (result)\r\n                    })}\r\n                    <hr/>\r\n                    <div \r\n                    className=\"UI-obj list-name\" \r\n                    onClick={this.creatNewList} \r\n                    >\r\n                        <h3><i className=\"far fa-plus-square\"></i> New List</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport TodoList from \"./TodoList\";\nimport UI from \"./UI\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expand: null,\n      intervalIsSet: null,\n      user: null,\n      currentList: 0\n    };\n    this.create = this.create.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n    this.remove = this.remove.bind(this);\n    this.handleExpandClick = this.handleExpandClick.bind(this);\n    this.handleChangeCurrentList = this.handleChangeCurrentList.bind(this);\n    this.handleAddList = this.handleAddList.bind(this);\n    this.handleRemoveList = this.handleRemoveList.bind(this);\n    this.handleListNameUpdate = this.handleListNameUpdate.bind(this);\n    this.copyPlannedTodo = this.copyPlannedTodo.bind(this);\n    this.handleChangeColor = this.handleChangeColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.getUserFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getUserFromDb, 100);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  getUserFromDb = () => {\n    let getUrl = \"daymaker/\" + document.getElementById('userId').innerHTML;\n    \n    axios.get(getUrl).then((res) => {\n      this.setState({ user: res.data });\n    });\n  };\n\n  create(newTodo) {\n    let getURL = \"daymaker/putData\";\n    axios.post(getURL, {\n      userId: this.state.user._id,\n      todo: newTodo,\n      currentList: this.state.currentList\n    });\n  }\n\n  update(id, updatedTask) {\n    let objIdsToUpdate = this.state.user.lists[this.state.currentList].todos.filter(t => {return t._id === id});\n    let [objIdToUpdate] = objIdsToUpdate;\n    let idToUpdate = objIdToUpdate._id;\n\n    let getURL = \"daymaker/updateData\";\n    axios.post(getURL, {\n      userId: this.state.user._id,\n      id: idToUpdate,\n      currentList: this.state.currentList,\n      update: updatedTask\n    });\n  }\n\n  toggleCompletion(id) {\n    let objIdsToUpdate = this.state.user.lists[this.state.currentList].todos.filter(t => {return t._id === id});\n    let [objIdToUpdate] = objIdsToUpdate;\n    let idToUpdate = objIdToUpdate._id;\n\n    let getURL = \"daymaker/updateData\";\n    axios.post(getURL, {\n      userId: this.state.user._id,\n      id: idToUpdate,\n      currentList: this.state.currentList,\n      update: \"\"\n    });\n  }\n\n  remove(id, isPlannedDelete) {\n\n    if(isPlannedDelete) {\n      let getURL = \"daymaker/deleteTodo\";\n      axios.delete(getURL, {\n        data: {\n          userId: this.state.user._id,\n          id: id\n        }\n      });\n    } else {\n      let objIdsToDelete = this.state.user.lists[this.state.currentList].todos.filter(t => {return t._id === id});\n      let [objIdToDelete] = objIdsToDelete;\n      let idToDelete = objIdToDelete._id;\n\n      let getURL = \"daymaker/deleteTodo\";\n      axios.delete(getURL, {\n        data: {\n          userId: this.state.user._id,\n          id: idToDelete,\n          currentList: this.state.currentList\n        }\n      });\n    }\n  }\n\n  handleExpandClick(event) {\n    if(event === undefined) {\n      if(this.state.expand === null) {\n        this.setState({expand: true});\n      } else {\n        this.setState({expand: !this.state.expand});\n      }\n    }\n\n    if(this.state.expand === true && event !== undefined) {\n      if(event.currentTarget.id === \"expand-press\") {\n        this.setState({expand: false});\n      }\n    }\n  }\n\n  handleChangeCurrentList(newCurrentList) {\n    this.setState({currentList: newCurrentList});\n  }\n  \n  handleAddList() {\n    let getURL = \"daymaker/addList\";\n    axios.post(getURL, {\n      userId: this.state.user._id\n    });\n  }\n\n  handleListNameUpdate(listId, newListName) {\n    let getURL = \"daymaker/updateListName\";\n    axios.post(getURL, {\n      userId: this.state.user._id,\n      listId: listId,\n      update: newListName\n    });\n  }\n\n  handleRemoveList(listId) {\n    let getURL = \"daymaker/deleteList\";\n    axios.delete(getURL, {\n      data: {\n        userId: this.state.user._id,\n        listId: listId\n      }\n    });\n\n    if(listId < this.state.currentList && this.state.user.lists.length !== 4) {\n      this.setState({currentList: (this.state.currentList - 1)});\n    } else {\n      this.setState({currentList: 0});\n    }\n\n    if(listId === this.state.currentList) {\n      this.setState({currentList: 0});\n    }\n  }\n\n  copyPlannedTodo(plannedTodo) {\n    let getURL = \"daymaker/copyData\";\n    axios.post(getURL, {\n      userId: this.state.user._id,\n      todo: plannedTodo,\n      currentList: 0\n    });\n  }\n\n  handleChangeColor(colorId) {\n    let getURL = \"daymaker/updateColor\";\n    axios.post(getURL, {\n      userId: this.state.user._id,\n      colorId: colorId\n    });\n  }\n\n  render() {\n    if(this.state.user !== null){\n      return (\n        <div className=\"main-div\" id=\"expand-press\" onClick={this.handleExpandClick} style={{\n            animation: this.state.expand ? \"slide-right 1s both\" : this.state.expand !== null && \"slide-left 1s both\"\n          }} >\n          <TodoList \n            user={this.state.user} \n            currentList={this.state.currentList}\n            create={this.create}\n            update={this.update}\n            toggleCompletion={this.toggleCompletion}\n            delete={this.remove}\n            copyPlannedTodo={this.copyPlannedTodo}\n          />\n          <UI \n            onExpandClick={this.handleExpandClick} \n            expand={this.state.expand}\n            user={this.state.user}\n            changeCurrentList={this.handleChangeCurrentList}\n            addList={this.handleAddList}\n            updateListName={this.handleListNameUpdate}\n            removeList={this.handleRemoveList}\n            changeColor={this.handleChangeColor}\n          />\n        </div>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet userId = document.getElementById('userId').innerHTML;\n\nReactDOM.render(<App userId={userId} />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}